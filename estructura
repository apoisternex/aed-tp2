var cantTraslados: int
var totalTraslados: int

var ciudadesPerdida: ArrayList<int>  // ciudad -> perdida
var maximaPerdida: int // valor maximo
var ciudadesMaxPerdida: ArrayList<int> // indices ciudades maxima perdida

var ciudadesGanancia: ArrayList<int>  // ciudad -> ganancia
var maximaGanancia: int // valor maximo
var ciudadesMaxGanancia: ArrayList<int> // indices ciudades maxima ganancia

var ciudadesSuperavit: ColaDePrioridad<Ciudad> 

var trasladosRedituables: ColaDePrioridad<InfoTraslados>  //TODO: handles
var trasladosAntiguedad: ColaDePrioridad<InfoTraslados> 


fn obtenerHandle(c: ColaDePrioridad<InfoTraslado>, id: int): HandleInfoTraslado

modulo wrapperTraslado {
    traslado: Traslado
    handle: int
} 

Modulo DobleHeap {
    var heap1
    var heap2
    var seq<(int, int)>
    invRep { x en heap1 <=> x en heap2 y ...}
} 

// lo hago para uno. ignoro todo el tema de ciudades
proc despacharMasAntiguo(inout sistema: BestEffort, in n: N): N {
    (res, pos) := sistema.trasladosAntiguedad.desencolarMax() // devuelve el trasalado y su pos en el otro heap
    // tenemos que eliminar res de el otro heap en log(|T|)
    sistema.trasladosRedituables.desencolar(pos) 
    return res
}

